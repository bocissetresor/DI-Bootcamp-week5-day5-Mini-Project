
My Courses
Calendar
Leaderboard
Slack
Blog
Learn More
Full Stack Python
Full Stack JavaScript
Summer Camp
About DI
Home page
Our Courses
Dates & Tuition
Blog
Terms & Conditions
Privacy
 Full Stack Coding Bootcamp - PHP - Angular - Full Time - 2023 Angular Intermediate Mini Project Day Mini Project : Reactive RESTful Web
Mini Project : Reactive RESTful Web
Building A Reactive RESTful Web Service Using Spring Boot And Postgres
Today, you will build a Spring WebFlux framework along with Spring Data R2DBC to build, test, and consume a simple reactive REST application.



Creating A Reactive REST User Management Application
Let us create a simple Reactive REST User Management application using the Spring Webflux framework and Spring Data R2DBC



Steps To Build
Set up the Spring WebFlux Project Setup
Use start.spring.io and create a sample project using the below artifacts:

Spring Reactive Web: The spring reactive web provides a reactive feature to our application.

Spring Data R2DBC: Provides Reactive Relational Database Connectivity to persist data in SQL stores using Spring Data in reactive applications.

Lombok: Java annotation library which helps to reduce boilerplate code.

H2 Database: Provides a fast in-memory database that supports JDBC API and R2DBC access, with a small (2mb) footprint. It is required for Integration testing.

PostgreSQL Driver: A JDBC and R2DBC driver that allows Java programs to connect to a PostgreSQL database using standard, database independent Java code.


Include Additional Maven Dependencies

Add the additional dependencies, shown below, to our project to enable Swagger for our application.

Furnish the Configuration of Postgres and H2

Configure the Swagger for our reactive application which will enable you to test your application easily.

Database Related Configuration - You have already added reactive streams Postgres driver in our classpath to perform non-blocking DB operations.

Next, use the application.yml file to provide a certain configuration related to Postgres and H2.

Configure multiple Spring profiles so that we can use different configurations based on the different environments.

Use the Postgres database for Development/Production and the H2 database for Testing.

Using Spring Data R2DBC, tables cannot be created at runtime. You can either create the tables externally or we can create a schema.sql file inside the resources folder and execute them programmatically.


For your application, you will create a schema.sql file inside the resources folder with all the DDL statements.

DROP TABLE IF EXISTS users ;

CREATE TABLE users (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT NULL,
    age integer,
    salary decimal);

DROP TABLE IF EXISTS department ;

CREATE TABLE department (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id integer,
    name VARCHAR(100) NOT NULL,
    loc VARCHAR(100));


Execute the schema.sql file, for which we need to override the ConnectionFactoryInitializer Bean.

Define a Model Class

Create two domain objects User and Department.
The User entity has an ID, Name, Age, and Salary.
You will use the User entity to test the User Management application.
The entity classes are annotated with “@Table” annotation to identify a domain object to be persisted in the Database.

Add @Id for each entity to define the primary keys of the table.


Create a Repository

Create a JPA UserRepository using which you can perform all the database related activities.

It will serve as a data repository that supports non-blocking reactive streams.

The UserRepository interface extends ReactiveCrudRepository which provides, for example, basic CRUD functionality.

Spring Boot automatically plugs in an implementation of this interface at runtime.

Add one custom query to fetch the users based on their age.

Create another JPA repository for the Department entity.


Define the Rest Controller Endpoints

write some APIs that can be exposed to the clients. The RestControlller publishes reactive streams of User

All the controller endpoints return a Publisher in the form of a Flux or a Mono. As you can see from the above code that, if you want to return a single resource to the caller then you need to use Mono and if you want to return a collection of resources then you need to use Flux.


Construct the Service Layer

Construct the Service Layer for your application.

Service Layer is required for encapsulating the business logic and also for centralizing the data access.

UserService does not have much business logic other than interacting with the Postgres Database using reactive Repository.

But you can also have a look at the below methods where you are performing parallel operations.


Test the Application with WebTestClient and Swagger-UI

use WebTestClient to perform integration testing for our REST APIs.

Consume a Reactive API Using Web Client.
Till now we have seen how to expose reactive APIs. Next, we will see how to consume a reactive API.

Use WebClient to interact with the reactive APIs created earlier.

Create a simple WebClient to retrieve data from our User Management application.



Submit Your Exercises :
Don’t forget to push to Github

Submit your exercises to DI Learning

More Info
Duration (approx)
> 2 hours


One Last Thing: Good luck!




Feedback
Tell us what you thought about the chapter: Mini Project : Reactive RESTful Web


© 2020 Developers Institute. All Rights Reserved.

 
 
 
Mini Project Day
0% Complete
Exercises
Daily Challenge
